// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]
  accounts      Account[]
  sessions      Session[]
  role          String    @default("USER")
  tasks         Task[]
  files         File[]
  analytics     Analytics[]
  analyticsEvents AnalyticsEvent[]
  notifications Notification[]
  preferences   UserPreferences?
  activityLogs  ActivityLog[]
  auditLogs     AuditLog[]
  exports       DataExport[]
  teams         TeamMember[]
  teamInvitations TeamInvitation[] @relation("Accepter")
  sentInvitations TeamInvitation[] @relation("Inviter")
  apiKeys       ApiKey[]
  projectMembers ProjectMember[]
  
  // GMB Integration
  gmbAccountId  String?
  gmbLocationId String?
  gmbAccountName String?
  gmbLocationName String?
  
  // Agent Orchestrator
  missions      Mission[]
  approvalRequests ApprovalRequest[]
  autoApprovalRules AutoApprovalRule[]
  
  // Review Campaign Engine
  reviewCampaigns ReviewCampaign[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     Content[]
  tasks       Task[]
  files       File[]
  analytics   Analytics[]
  notifications Notification[]
  activityLogs  ActivityLog[]
  members     ProjectMember[]
  teamId      String?
  team        Team?     @relation(fields: [teamId], references: [id])
}

model Content {
  id          String   @id @default(cuid())
  title       String
  body        String
  type        String
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("TODO")
  priority    String    @default("MEDIUM")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  notifications Notification[]
  activityLogs  ActivityLog[]
}

model File {
  id          String    @id @default(cuid())
  name        String
  type        String
  size        Int
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  notifications Notification[]
  activityLogs  ActivityLog[]
}

model Analytics {
  id          String    @id @default(cuid())
  type        String    // e.g., 'page_view', 'api_call', 'error'
  action      String    // e.g., 'view_dashboard', 'create_project'
  metadata    String?   // Additional data about the event (JSON string)
  createdAt   DateTime  @default(now())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
}

model SystemMetrics {
  id          String    @id @default(cuid())
  type        String    // e.g., 'cpu_usage', 'memory_usage', 'api_latency'
  value       Float
  timestamp   DateTime  @default(now())
  metadata    String?   // Additional metrics data (JSON string)
}

model Notification {
  id          String    @id @default(cuid())
  type        String    // e.g., 'task_assigned', 'project_updated', 'file_uploaded'
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  taskId      String?
  task        Task?     @relation(fields: [taskId], references: [id])
  fileId      String?
  file        File?     @relation(fields: [fileId], references: [id])
}

model UserPreferences {
  id                String    @id @default(cuid())
  theme             String    @default("light") // light, dark, system
  language          String    @default("en")
  emailNotifications Boolean  @default(true)
  pushNotifications Boolean  @default(true)
  timezone          String    @default("UTC")
  dateFormat        String    @default("MM/DD/YYYY")
  timeFormat        String    @default("12h")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id          String    @id @default(cuid())
  action      String    // e.g., 'login', 'create_project', 'update_task'
  details     String?   // Additional activity details (JSON string)
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  taskId      String?
  task        Task?     @relation(fields: [taskId], references: [id])
  fileId      String?
  file        File?     @relation(fields: [fileId], references: [id])
}

model AuditLog {
  id          String    @id @default(cuid())
  action      String    // e.g., 'create', 'update', 'delete', 'login', 'logout'
  entityType  String    // e.g., 'user', 'project', 'task', 'file'
  entityId    String?
  oldValue    String?   // Previous state (JSON string)
  newValue    String?   // New state (JSON string)
  metadata    String?   // Additional audit data (JSON string)
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model DataExport {
  id          String    @id @default(cuid())
  type        String    // e.g., 'projects', 'tasks', 'files', 'all'
  format      String    // e.g., 'json', 'csv', 'excel'
  status      String    // e.g., 'pending', 'processing', 'completed', 'failed'
  url         String?   // Download URL
  error       String?   // Error message if failed
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  metadata    String?   // Export configuration (JSON string)
}

model ProjectMember {
  id          String    @id @default(cuid())
  role        String    @default("VIEWER")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Team {
  id          String    @id @default(cuid())
  name        String
  description String?
  
  // Stripe subscription fields
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionStatus   String?
  subscriptionPlan     String?   @default("freemium")
  subscriptionStartDate DateTime?
  subscriptionEndDate  DateTime?
  scheduledCancellationDate DateTime?
  cancellationReason   String?
  lastPaymentFailure   DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     TeamMember[]
  projects    Project[]
  invitations TeamInvitation[]
  analytics   TeamAnalytics?
  billing     TeamBilling?
  settings    TeamSettings?
  integrations TeamIntegration[]
  
  // New relations for subscription features
  websiteScans         WebsiteScan[]
  competitiveReports   CompetitiveReport[]
  
  // Competitive Intelligence relations
  competitiveAnalyses  CompetitiveAnalysis[]
  
  // Innovation Agent relations
  technologyTrends     TechnologyTrend[]
  competitorProfiles   CompetitorProfile[]
  researchPapers       ResearchPaper[]
  githubTrends         GitHubTrend[]
  innovationBriefs     InnovationBrief[]
  innovationAlerts     InnovationAlert[]
  competitorAlerts     CompetitorAlert[]
  monitoringSources    MonitoringSource[]
}

model TeamMember {
  id          String    @id @default(cuid())
  role        String    @default("VIEWER")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model TeamInvitation {
  id          String    @id @default(cuid())
  email       String
  role        String    @default("VIEWER")
  status      String    @default("pending") // pending, accepted, rejected
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  invitedBy   String
  inviter     User      @relation("Inviter", fields: [invitedBy], references: [id])
  acceptedBy  String?
  accepter    User?     @relation("Accepter", fields: [acceptedBy], references: [id])
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  scopes      String    // Permission scopes (comma-separated)
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model TeamAnalytics {
  id            String   @id @default(cuid())
  teamId        String   @unique
  totalRequests Int      @default(0)
  totalTokens   Int      @default(0)
  growthRate    Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  team          Team      @relation(fields: [teamId], references: [id])
  usageStats    UsageStats[]
}

model UsageStats {
  id            String   @id @default(cuid())
  teamAnalyticsId String
  date          DateTime
  requests      Int
  tokens        Int
  createdAt     DateTime @default(now())
  teamAnalytics TeamAnalytics @relation(fields: [teamAnalyticsId], references: [id])
  @@unique([teamAnalyticsId, date])
}

model TeamBilling {
  id            String   @id @default(cuid())
  teamId        String   @unique
  plan          String
  status        String
  nextBillingDate DateTime
  amount        Float
  currency      String
  autoRenew     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  team          Team      @relation(fields: [teamId], references: [id])
  paymentMethod PaymentMethod?
  paymentHistory PaymentHistory[]
}

model PaymentMethod {
  id            String   @id @default(cuid())
  teamBillingId String   @unique
  type          String
  last4         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamBilling   TeamBilling @relation(fields: [teamBillingId], references: [id])
}

model PaymentHistory {
  id            String   @id @default(cuid())
  teamBillingId String
  date          DateTime
  amount        Float
  status        String
  createdAt     DateTime @default(now())
  teamBilling   TeamBilling @relation(fields: [teamBillingId], references: [id])
}

model TeamSettings {
  id            String   @id @default(cuid())
  teamId        String   @unique
  timezone      String   @default("UTC")
  language      String   @default("en")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  team          Team      @relation(fields: [teamId], references: [id])
  notifications Notifications?
  integrations  Integrations?
}

model Notifications {
  id            String   @id @default(cuid())
  teamSettingsId String   @unique
  email         Boolean  @default(true)
  slack         Boolean  @default(false)
  discord       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamSettings  TeamSettings @relation(fields: [teamSettingsId], references: [id])
}

model Integrations {
  id            String   @id @default(cuid())
  teamSettingsId String   @unique
  slack         Boolean  @default(false)
  discord       Boolean  @default(false)
  github        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamSettings  TeamSettings @relation(fields: [teamSettingsId], references: [id])
}

model TeamIntegration {
  id          String    @id @default(cuid())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  type        String    // e.g., 'slack', 'github', 'jira'
  config      String    // Store integration configuration (JSON string)
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Agent Orchestrator Models
model Mission {
  id              String            @id @default(cuid())
  goal            String
  status          MissionStatus     @default(PENDING)
  priority        Priority          @default(NORMAL)
  results         Json?
  estimatedHours  Float?
  actualHours     Float?
  clientId        String
  client          User              @relation(fields: [clientId], references: [id])
  tasks           MissionTask[]
  approvalRequests ApprovalRequest[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  completedAt     DateTime?
  
  @@map("missions")
}

model MissionTask {
  id          String      @id @default(cuid())
  missionId   String
  mission     Mission     @relation(fields: [missionId], references: [id])
  agentType   String      // 'ContentAgent', 'MediaAgent', etc.
  taskType    String      // 'write_copy', 'generate_image', etc.
  status      TaskStatus  @default(QUEUED)
  inputs      Json
  outputs     Json?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  dependsOn   String[]    // Task IDs this task depends on
  
  @@map("mission_tasks")
}

enum MissionStatus {
  PENDING
  IN_PROGRESS
  COMPLETE
  FAILED
  CANCELLED
}

enum TaskStatus {
  QUEUED
  IN_PROGRESS
  COMPLETE
  FAILED
  RETRYING
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Approval Center Models
model ApprovalRequest {
  id              String            @id @default(cuid())
  missionId       String
  mission         Mission           @relation(fields: [missionId], references: [id])
  agentType       String
  taskType        String
  contentType     String            // 'social_post', 'blog_article', 'review_reply'
  originalContent Json
  editedContent   Json?
  status          ApprovalStatus    @default(PENDING)
  priority        Priority          @default(NORMAL)
  clientId        String
  client          User              @relation(fields: [clientId], references: [id])
  reviewedAt      DateTime?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  autoApprovalRule String?          // Reference to rule that auto-approved
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("approval_requests")
}

model AutoApprovalRule {
  id              String            @id @default(cuid())
  name            String
  clientId        String
  client          User              @relation(fields: [clientId], references: [id])
  agentType       String
  conditions      Json              // Conditions for auto-approval
  actions         Json              // Actions to take when conditions met
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("auto_approval_rules")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  EDITING
  AUTO_APPROVED
}

// Review Campaign & Marketing Engine Models
model ReviewCampaign {
  id              String            @id @default(cuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  userEmail       String
  userName        String
  triggerType     ReviewTriggerType
  status          ReviewCampaignStatus @default(PENDING)
  contextData     Json?
  emailSent       Boolean           @default(false)
  emailOpenedAt   DateTime?
  emailClickedAt  DateTime?
  responseAt      DateTime?
  reviewSubmitted Boolean           @default(false)
  reviewId        String?
  reviewRating    Int?
  reviewText      String?
  testimonialCreated Boolean        @default(false)
  socialCampaignId String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  testimonials    TestimonialAsset[]
  socialCampaigns SocialProofCampaign[]
  
  @@map("review_campaigns")
}

model TestimonialAsset {
  id              String            @id @default(cuid())
  campaignId      String
  campaign        ReviewCampaign    @relation(fields: [campaignId], references: [id])
  quote           String
  authorName      String
  authorTitle     String?
  authorCompany   String?
  imageUrl        String?
  designStyle     String
  brandColors     Json
  status          AssetStatus       @default(PENDING)
  mediaAgentTaskId String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("testimonial_assets")
}

model SocialProofCampaign {
  id              String            @id @default(cuid())
  reviewCampaignId String
  reviewCampaign  ReviewCampaign    @relation(fields: [reviewCampaignId], references: [id])
  testimonialAssetId String?
  platforms       Json              // Array of platform names
  content         Json              // Platform-specific content
  imageUrl        String?
  status          CampaignStatus    @default(PENDING)
  scheduledAt     DateTime?
  publishedAt     DateTime?
  engagementStats Json?
  approvalRequestId String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("social_proof_campaigns")
}

model WebsiteEnhancement {
  id              String            @id @default(cuid())
  type            EnhancementType   
  sourceReviewId  String?
  content         Json
  status          EnhancementStatus @default(PENDING)
  implementedAt   DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("website_enhancements")
}

model ReviewAnalytics {
  id              String            @id @default(cuid())
  timeframe       String            // e.g., 'daily', 'weekly', 'monthly'
  date            DateTime
  campaignsSent   Int               @default(0)
  emailsOpened    Int               @default(0)
  emailsClicked   Int               @default(0)
  reviewsReceived Int               @default(0)
  averageRating   Float?
  testimonialsCreated Int           @default(0)
  socialPostsPublished Int          @default(0)
  websiteUpdates  Int               @default(0)
  conversionRate  Float?
  createdAt       DateTime          @default(now())
  
  @@unique([timeframe, date])
  @@map("review_analytics")
}

enum ReviewTriggerType {
  FREE_USER
  PAID_CLIENT
}

enum ReviewCampaignStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  RESPONDED
  COMPLETED
  FAILED
}

enum AssetStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  APPROVED
  PUBLISHED
}

enum CampaignStatus {
  PENDING
  SCHEDULED
  PUBLISHED
  FAILED
  COMPLETED
}

enum EnhancementType {
  FAQ_UPDATE
  TESTIMONIAL_WIDGET
  LANDING_PAGE_UPDATE
  CASE_STUDY
  SOCIAL_PROOF_ELEMENT
}

enum EnhancementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

// Partner Ecosystem Models
enum PartnerTier {
  STANDARD
  INTEGRATION
  CERTIFIED_EXPERT
}

enum PartnerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum PartnershipType {
  AFFILIATE
  INTEGRATION
  EXPERT_DIRECTORY
}

enum CommissionStatus {
  PENDING
  PAID
  CANCELLED
}

model Partner {
  id              String            @id @default(cuid())
  companyName     String
  website         String
  contactEmail    String
  contactName     String
  description     String
  tier            PartnerTier       @default(STANDARD)
  status          PartnerStatus     @default(PENDING)
  partnershipType PartnershipType
  commissionRate  Float             @default(10.0)
  totalReferrals  Int               @default(0)
  totalEarnings   Float             @default(0.0)
  featuredUntil   DateTime?
  apiKey          String?           @unique
  webhookUrl      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  referrals       PartnerReferral[]
  assets          PartnerAsset[]
  performance     PartnerPerformance[]
  campaigns       CoMarketingCampaign[]
  expert          ZenithExpert?

  @@map("partners")
}

model PartnerApplication {
  id                  String            @id @default(cuid())
  companyName         String
  website             String
  contactEmail        String
  contactName         String
  description         String
  serviceOffered      String
  partnershipType     PartnershipType
  whyPartner          String
  previousExperience  String?
  expectedVolume      String?
  status              PartnerStatus     @default(PENDING)
  reviewNotes         String?
  reviewedBy          String?
  reviewedAt          DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("partner_applications")
}

model PartnerReferral {
  id               String            @id @default(cuid())
  partnerId        String
  partner          Partner           @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  referralCode     String            @unique
  customerEmail    String
  customerName     String?
  conversionValue  Float             @default(0.0)
  commissionAmount Float             @default(0.0)
  commissionStatus CommissionStatus  @default(PENDING)
  conversionDate   DateTime?
  paidAt           DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([partnerId])
  @@map("partner_referrals")
}

model PartnerAsset {
  id          String   @id @default(cuid())
  partnerId   String
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  name        String
  type        String
  url         String
  description String?
  clickCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([partnerId])
  @@map("partner_assets")
}

model PartnerPerformance {
  id          String   @id @default(cuid())
  partnerId   String
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  month       DateTime
  clicks      Int      @default(0)
  conversions Int      @default(0)
  revenue     Float    @default(0.0)
  commission  Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([partnerId])
  @@map("partner_performance")
}

model CoMarketingCampaign {
  id             String   @id @default(cuid())
  partnerId      String
  partner        Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  name           String
  description    String
  type           String
  status         String   @default("DRAFT")
  targetAudience String?
  budget         Float?
  startDate      DateTime?
  endDate        DateTime?
  results        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([partnerId])
  @@map("co_marketing_campaigns")
}

model ZenithExpert {
  id                String   @id @default(cuid())
  partnerId         String   @unique
  partner           Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  expertName        String
  title             String
  bio               String
  specialties       String[]
  hourlyRate        Float?
  availability      String   @default("AVAILABLE")
  rating            Float?   @default(0.0)
  reviewCount       Int      @default(0)
  portfolioUrl      String?
  linkedinUrl       String?
  certificationsPath String?
  featured          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("zenith_experts")
}

// SearchMasteryAgent Models
model BacklinkOpportunity {
  id              String   @id @default(cuid())
  clientId        String
  domain          String
  domainAuthority Int
  pageUrl         String
  contactEmail    String
  relevanceScore  Float
  linkingToDomain String
  anchorText      String
  linkType        String   // 'dofollow' | 'nofollow'
  publishDate     DateTime
  trafficEstimate Int
  status          String   @default("potential") // potential, targeted, acquired, rejected
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("backlink_opportunities")
}

model OutreachCampaign {
  id              String   @id @default(cuid())
  clientId        String
  targetDomain    String
  targetEmail     String
  opportunityId   String
  articleTitle    String
  articleContent  String
  articleUrl      String?
  emailSequence   Json     // Array of email objects
  status          String   @default("draft") // draft, sent, replied, linked, rejected
  lastContactDate DateTime?
  responseReceived Boolean @default(false)
  backlinkAcquired Boolean @default(false)
  backlinkUrl     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("outreach_campaigns")
}

model AcquiredBacklink {
  id              String   @id @default(cuid())
  clientId        String
  url             String   @unique
  domain          String
  anchorText      String
  linkType        String   // 'dofollow' | 'nofollow'
  domainAuthority Int
  pageAuthority   Int
  isVerified      Boolean  @default(false)
  isValuable      Boolean  @default(false)
  discoveredDate  DateTime @default(now())
  verifiedDate    DateTime?
  campaignId      String?  // Reference to OutreachCampaign if applicable
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("acquired_backlinks")
}

model SearchConsoleMission {
  id              String   @id @default(cuid())
  clientId        String
  siteUrl         String
  sitemapSubmitted Boolean @default(false)
  crawlErrors     Json?    // Array of crawl error objects
  performanceData Json?    // GSC performance insights
  indexingRequests Json?   // URLs requested for indexing
  status          String   @default("pending") // pending, completed, failed
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("search_console_missions")
}

model SearchMasteryMission {
  id                    String   @id @default(cuid())
  clientId              String
  type                  String   // 'monthly_authority_build', 'backlink_verification', 'gsc_management'
  status                String   @default("pending") // pending, in_progress, completed, failed
  opportunitiesFound    Int?
  campaignsCreated      Int?
  backlinksVerified     Int?
  gscTasksCompleted     Int?
  results               Json?
  startedAt             DateTime @default(now())
  completedAt           DateTime?
  estimatedCompletionAt DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("search_mastery_missions")
}

model ClientProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  domain          String
  niche           String?
  competitors     String[] // Array of competitor domains
  targetKeywords  String[] // Array of target keywords
  authorityScore  Float    @default(0.0)
  gscToken        String?  // Encrypted GSC OAuth token
  lastAnalyzed    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("client_profiles")
}

// Zenith Communications & CRM Engine Models
model CrmContact {
  id              String            @id @default(cuid())
  type            ContactType
  firstName       String
  lastName        String
  email           String            @unique
  phone           String?
  company         String?
  title           String?
  avatar          String?
  status          ContactStatus     @default(ACTIVE)
  leadScore       Int               @default(0) // 0-100 lead scoring
  source          String?           // How they found us
  notes           String?
  tags            String[]          // Flexible tagging system
  customFields    Json?             // Additional flexible data
  assignedTo      String?           // User ID of assigned team member
  lastContactDate DateTime?
  nextFollowUp    DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  interactions    CrmInteraction[]
  tasks           CrmTask[]
  campaigns       EmailCampaign[]   @relation("CampaignContacts")
  snapshots       SandboxSnapshot[]
  
  @@map("crm_contacts")
}

model CrmInteraction {
  id              String            @id @default(cuid())
  contactId       String
  contact         CrmContact        @relation(fields: [contactId], references: [id], onDelete: Cascade)
  type            InteractionType
  direction       InteractionDirection
  subject         String?
  content         String?
  metadata        Json?             // Email IDs, meeting links, etc.
  performedBy     String?           // User ID or Agent name
  scheduledAt     DateTime?
  completedAt     DateTime?
  status          InteractionStatus @default(COMPLETED)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("crm_interactions")
}

model CrmTask {
  id              String            @id @default(cuid())
  title           String
  description     String?
  type            TaskType
  priority        TaskPriority      @default(NORMAL)
  status          CrmTaskStatus     @default(PENDING)
  dueDate         DateTime?
  completedAt     DateTime?
  assignedTo      String?           // User ID
  createdBy       String?           // User ID or Agent name
  contactId       String?
  contact         CrmContact?       @relation(fields: [contactId], references: [id])
  metadata        Json?             // Additional task context
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("crm_tasks")
}

model EmailCampaign {
  id              String            @id @default(cuid())
  name            String
  description     String?
  type            EmailCampaignType
  status          EmailCampaignStatus    @default(DRAFT)
  templateId      String?
  subject         String
  content         String
  fromName        String
  fromEmail       String
  scheduledAt     DateTime?
  sentAt          DateTime?
  createdBy       String            // User ID
  metadata        Json?             // Campaign settings
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  contacts        CrmContact[]      @relation("CampaignContacts")
  sequences       EmailSequence[]
  analytics       EmailAnalytics[]
  
  @@map("email_campaigns")
}

model EmailSequence {
  id              String            @id @default(cuid())
  campaignId      String
  campaign        EmailCampaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  stepNumber      Int
  delayDays       Int               @default(0)
  delayHours      Int               @default(0)
  subject         String
  content         String
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  sends           EmailSend[]
  
  @@unique([campaignId, stepNumber])
  @@map("email_sequences")
}

model EmailSend {
  id              String            @id @default(cuid())
  sequenceId      String
  sequence        EmailSequence     @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  contactId       String
  emailAddress    String
  status          EmailSendStatus   @default(QUEUED)
  scheduledAt     DateTime
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  repliedAt       DateTime?
  bouncedAt       DateTime?
  errorMessage    String?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("email_sends")
}

model EmailAnalytics {
  id              String            @id @default(cuid())
  campaignId      String
  campaign        EmailCampaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  date            DateTime
  sent            Int               @default(0)
  delivered       Int               @default(0)
  opened          Int               @default(0)
  clicked         Int               @default(0)
  replied         Int               @default(0)
  bounced         Int               @default(0)
  unsubscribed    Int               @default(0)
  createdAt       DateTime          @default(now())
  
  @@unique([campaignId, date])
  @@map("email_analytics")
}

model SandboxSnapshot {
  id              String            @id @default(cuid())
  contactId       String
  contact         CrmContact        @relation(fields: [contactId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  version         String            @default("1.0")
  snapshotData    Json              // Complete sandbox state
  isActive        Boolean           @default(false)
  createdBy       String?           // User ID
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("sandbox_snapshots")
}

// Enums for CRM System
enum ContactType {
  CLIENT
  PROSPECT
  AFFILIATE
  PARTNER
  STAFF
  AGENT
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  QUALIFIED
  UNQUALIFIED
  CONVERTED
  CHURNED
}

enum InteractionType {
  EMAIL
  PHONE_CALL
  MEETING
  DEMO
  SUPPORT_TICKET
  SOCIAL_MEDIA
  WEBSITE_VISIT
  FORM_SUBMISSION
  PURCHASE
  REFUND
  NOTE
}

enum InteractionDirection {
  INBOUND
  OUTBOUND
}

enum InteractionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TaskType {
  FOLLOW_UP
  DEMO
  PROPOSAL
  SUPPORT
  ONBOARDING
  RENEWAL
  UPSELL
  RESEARCH
  OUTREACH
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum CrmTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum EmailCampaignType {
  WELCOME_SERIES
  NURTURE_SEQUENCE
  PROMOTION
  NEWSLETTER
  PRODUCT_UPDATE
  RE_ENGAGEMENT
  ONBOARDING
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum EmailSendStatus {
  QUEUED
  SENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
  UNSUBSCRIBED
}


// Subscription Usage Tracking Models
model WebsiteScan {
  id          String    @id @default(cuid())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  url         String
  status      String    @default("pending")
  healthScore Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([teamId, createdAt])
}

model CompetitiveReport {
  id          String    @id @default(cuid())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  targetDomain String
  competitors  Json?
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([teamId, createdAt])
}

// Competitive Intelligence Platform Models
model CompetitorProfile {
  id              String   @id @default(cuid())
  domain          String   @unique
  name            String?
  description     String?
  industry        String?
  traffic         Int?
  authorityScore  Float?
  lastAnalyzed    DateTime?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  analyses        CompetitiveAnalysis[] @relation("TargetCompetitor")
  competitorIn    CompetitiveAnalysis[] @relation("AnalysisCompetitors")
  keywordGaps     KeywordGap[]
  backlinkGaps    BacklinkGap[]
  contentGaps     ContentGap[]
  
  @@map("competitor_profiles")
}

model CompetitiveAnalysis {
  id               String            @id @default(cuid())
  targetDomain     String
  targetCompetitor CompetitorProfile @relation("TargetCompetitor", fields: [targetDomain], references: [domain])
  competitors      CompetitorProfile[] @relation("AnalysisCompetitors")
  teamId           String
  team             Team              @relation(fields: [teamId], references: [id])
  
  // Analysis Results
  marketPosition   Json              // rank, percentile, total analyzed
  opportunities    Json              // array of opportunity objects
  strengths        Json              // array of strength strings
  weaknesses       Json              // array of weakness strings  
  recommendations  Json              // array of recommendation objects
  benchmarkData    Json              // average, top performer, median scores
  
  status           CompetitiveAnalysisStatus @default(PENDING)
  completedAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  keywordGaps      KeywordGap[]
  backlinkGaps     BacklinkGap[]
  contentGaps      ContentGap[]
  alerts           CompetitiveAlert[]
  
  @@index([teamId, createdAt])
  @@map("competitive_analyses")
}

model KeywordGap {
  id              String            @id @default(cuid())
  analysisId      String?
  analysis        CompetitiveAnalysis? @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  targetDomain    String
  targetCompetitor CompetitorProfile @relation(fields: [targetDomain], references: [domain])
  
  keyword         String
  searchVolume    Int
  difficulty      Float
  targetPosition  Int?              // Target domain position (null if not ranking)
  competitorData  Json              // Array of competitor positions
  
  // Gap Analysis
  gapType         KeywordGapType
  opportunityScore Float            // volume × difficulty × gap score
  priority        KeywordPriority   @default(MEDIUM)
  
  // Categorization
  cluster         String?           // Keyword cluster/theme
  intent          SearchIntent      @default(INFORMATIONAL)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([targetDomain, opportunityScore])
  @@index([gapType, priority])
  @@map("keyword_gaps")
}

model BacklinkGap {
  id               String            @id @default(cuid())
  analysisId       String?
  analysis         CompetitiveAnalysis? @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  targetDomain     String
  targetCompetitor CompetitorProfile @relation(fields: [targetDomain], references: [domain])
  
  // Linking Domain Info
  linkingDomain    String
  domainAuthority  Int
  pageAuthority    Int
  linkUrl          String
  anchorText       String?
  linkType         LinkType          @default(DOFOLLOW)
  
  // Gap Analysis
  competitorsLinking Json            // Which competitors have this link
  linkValue         Float            // Calculated value score
  priority          BacklinkPriority @default(MEDIUM)
  
  // Outreach Status
  outreachStatus    OutreachStatus   @default(NOT_STARTED)
  contactEmail      String?
  lastContactDate   DateTime?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([targetDomain, linkValue])
  @@index([outreachStatus])
  @@map("backlink_gaps")
}

model ContentGap {
  id               String            @id @default(cuid())
  analysisId       String?
  analysis         CompetitiveAnalysis? @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  targetDomain     String
  targetCompetitor CompetitorProfile @relation(fields: [targetDomain], references: [domain])
  
  // Content Info
  topic            String
  contentType      ContentType       @default(BLOG_POST)
  competitorUrl    String
  competitorDomain String
  
  // Performance Metrics
  estimatedTraffic Int?
  backlinks        Int?
  socialShares     Int?
  wordCount        Int?
  
  // Gap Analysis
  gapReason        String            // Why this is a gap
  opportunityScore Float
  priority         ContentPriority   @default(MEDIUM)
  
  // Content Strategy
  suggestedTitle   String?
  suggestedOutline Json?             // Array of heading suggestions
  targetKeywords   Json?             // Array of keywords to target
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  @@index([targetDomain, opportunityScore])
  @@index([contentType, priority])
  @@map("content_gaps")
}

model CompetitiveAlert {
  id               String            @id @default(cuid())
  analysisId       String
  analysis         CompetitiveAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  teamId           String
  
  alertType        CompetitiveAlertType
  severity         AlertSeverity     @default(MEDIUM)
  title            String
  description      String
  data             Json              // Alert-specific data
  
  isRead           Boolean           @default(false)
  isActionable     Boolean           @default(true)
  actionTaken      String?
  
  createdAt        DateTime          @default(now())
  readAt           DateTime?
  
  @@index([teamId, isRead])
  @@index([alertType, severity])
  @@map("competitive_alerts")
}

model CompetitorTracking {
  id               String            @id @default(cuid())
  teamId           String
  targetDomain     String
  competitorDomain String
  
  // Tracking Settings
  isActive         Boolean           @default(true)
  frequency        TrackingFrequency @default(WEEKLY)
  alertThreshold   Float             @default(5.0) // % change to trigger alert
  
  // Metrics to Track
  trackKeywords    Boolean           @default(true)
  trackBacklinks   Boolean           @default(true)
  trackContent     Boolean           @default(true)
  trackTraffic     Boolean           @default(false)
  
  lastChecked      DateTime?
  nextCheck        DateTime?
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  metrics          CompetitorMetric[]
  
  @@unique([teamId, targetDomain, competitorDomain])
  @@index([isActive, nextCheck])
  @@map("competitor_tracking")
}

model CompetitorMetric {
  id               String            @id @default(cuid())
  trackingId       String
  tracking         CompetitorTracking @relation(fields: [trackingId], references: [id], onDelete: Cascade)
  
  metricType       CompetitorMetricType
  value            Float
  previousValue    Float?
  changePercent    Float?
  
  // Context Data
  metadata         Json?             // Additional metric context
  
  recordedAt       DateTime          @default(now())
  
  @@index([trackingId, metricType, recordedAt])
  @@map("competitor_metrics")
}

// Competitive Intelligence Enums
enum CompetitiveAnalysisStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum KeywordGapType {
  MISSING           // Target not ranking, competitors are
  UNDERPERFORMING   // Target ranking lower than competitors
  OPPORTUNITY       // High volume, low competition
  CONTENT_GAP       // Need content for keyword cluster
}

enum KeywordPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SearchIntent {
  INFORMATIONAL
  NAVIGATIONAL
  TRANSACTIONAL
  COMMERCIAL
}

enum LinkType {
  DOFOLLOW
  NOFOLLOW
  SPONSORED
  UGC
}

enum BacklinkPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum OutreachStatus {
  NOT_STARTED
  RESEARCHING
  CONTACTED
  FOLLOW_UP
  RESPONDED
  LINK_ACQUIRED
  REJECTED
  ABANDONED
}

enum ContentType {
  BLOG_POST
  LANDING_PAGE
  GUIDE
  TUTORIAL
  CASE_STUDY
  TOOL
  INFOGRAPHIC
  VIDEO
  PODCAST
}

enum ContentPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CompetitiveAlertType {
  NEW_COMPETITOR
  RANKING_CHANGE
  BACKLINK_GAIN
  BACKLINK_LOSS
  CONTENT_PUBLISHED
  TRAFFIC_CHANGE
  KEYWORD_OPPORTUNITY
  TECHNICAL_CHANGE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TrackingFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum CompetitorMetricType {
  KEYWORD_RANKINGS
  BACKLINK_COUNT
  DOMAIN_AUTHORITY
  TRAFFIC_ESTIMATE
  CONTENT_COUNT
  TECHNICAL_SCORE
}

// Analytics and Conversion Tracking Models
model AnalyticsEvent {
  id          String    @id @default(cuid())
  event       String
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  sessionId   String
  timestamp   DateTime  @default(now())
  properties  Json
  value       Float?
  currency    String?   @default("USD")
  createdAt   DateTime  @default(now())
  
  @@index([event, timestamp])
  @@index([userId, timestamp])
  @@index([sessionId, timestamp])
  @@map("analytics_events")
}

// Innovation Agent Models
model TechnologyTrend {
  id               String    @id @default(cuid())
  name             String
  category         String    // ai, web, mobile, cloud, security, blockchain, iot, other
  description      String
  relevanceScore   Float
  adoptionRate     Float
  maturityLevel    String    // emerging, growing, mature, declining
  impactPotential  String    // low, medium, high, transformative
  timeToMainstream Int       // months
  keyPlayers       String[]
  useCases         String[]
  risks            String[]
  opportunities    String[]
  firstDetected    DateTime  @default(now())
  lastUpdated      DateTime  @updatedAt
  teamId           String?
  team             Team?     @relation(fields: [teamId], references: [id])
  
  @@index([category, relevanceScore])
  @@index([firstDetected])
  @@map("technology_trends")
}

model CompetitorProfile {
  id              String               @id @default(cuid())
  name            String
  domain          String               @unique
  category        String               // direct, indirect, adjacent
  productsTracked String[]
  trackingUrls    Json                 // {features, pricing, changelog, blog, docs}
  checkFrequency  String               // daily, weekly, realtime
  lastChecked     DateTime?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  teamId          String?
  team            Team?                @relation(fields: [teamId], references: [id])
  
  // Relations
  featureDetections FeatureDetection[]
  pricingChanges    PricingChange[]
  snapshots         CompetitorSnapshot[]
  alerts            CompetitorAlert[]
  
  @@index([domain])
  @@index([isActive, checkFrequency])
  @@map("competitor_profiles")
}

model FeatureDetection {
  id              String             @id @default(cuid())
  competitorId    String
  competitor      CompetitorProfile  @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  featureName     String
  category        String             // core, addon, integration, performance, ui, api, pricing
  description     String
  detectedDate    DateTime           @default(now())
  launchDate      DateTime?
  screenshots     String[]
  technicalDetails Json              // {stack, apis, integrations, performance}
  pricingImpact   Json?              // {type, oldPrice, newPrice, details}
  marketAnalysis  Json               // {targetAudience, uniqueValue, competitiveAdvantage, estimatedDevelopmentTime, threatLevel}
  userReaction    Json?              // {sentiment, feedback, adoptionSignals}
  responseStatus  String             @default("pending") // pending, planned, in_progress, completed, dismissed
  responsePlan    String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  @@index([competitorId, detectedDate])
  @@index([category, detectedDate])
  @@map("feature_detections")
}

model PricingChange {
  id                String             @id @default(cuid())
  competitorId      String
  competitor        CompetitorProfile  @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  changeType        String             // increase, decrease, new_plan, plan_removal, feature_change
  oldPricing        Json
  newPricing        Json
  affectedPlans     String[]
  percentageChange  Float?
  effectiveDate     DateTime
  detectedDate      DateTime           @default(now())
  marketImpact      String
  recommendedResponse String
  createdAt         DateTime           @default(now())
  
  @@index([competitorId, detectedDate])
  @@index([changeType, detectedDate])
  @@map("pricing_changes")
}

model CompetitorSnapshot {
  id            String             @id @default(cuid())
  competitorId  String
  competitor    CompetitorProfile  @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  timestamp     DateTime           @default(now())
  features      Json               // Array of features at time of snapshot
  pricing       Json               // Pricing structure at time of snapshot
  marketPosition Json             // Market position data
  featureCount  Int                @default(0)
  changes       Json?              // {newFeatures, removedFeatures, priceChanges, otherChanges}
  
  @@index([competitorId, timestamp])
  @@map("competitor_snapshots")
}

model CompetitorAlert {
  id                String             @id @default(cuid())
  competitorId      String?
  competitor        CompetitorProfile? @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  type              String             // feature_launch, pricing_change, market_move, strategic_shift
  severity          String             // low, medium, high, critical
  title             String
  description       String
  recommendedAction String?
  isRead            Boolean            @default(false)
  readAt            DateTime?
  readBy            String?
  teamId            String?
  team              Team?              @relation(fields: [teamId], references: [id])
  createdAt         DateTime           @default(now())
  
  @@index([isRead, severity])
  @@index([teamId, createdAt])
  @@map("competitor_alerts")
}

model ResearchPaper {
  id                    String    @id @default(cuid())
  title                 String
  authors               String[]
  source                String    // arxiv, google_research, openai, anthropic, other
  abstract              String
  keyFindings           String[]
  technologies          String[]
  applicationPotential  Float     // 0-100
  businessImpact        String
  implementationComplexity String // low, medium, high
  relevanceToProduct    Float     // 0-100
  publishedDate         DateTime
  url                   String
  arxivId               String?
  doi                   String?
  categories            String[]
  pdfUrl                String?
  createdAt             DateTime  @default(now())
  teamId                String?
  team                  Team?     @relation(fields: [teamId], references: [id])
  
  @@index([source, publishedDate])
  @@index([applicationPotential])
  @@map("research_papers")
}

model GitHubTrend {
  id                   String    @id @default(cuid())
  repository           String
  owner                String
  description          String
  language             String
  stars                Int
  starsGrowth          Int       // last 7 days
  forks                Int
  topics               String[]
  lastCommit           DateTime
  trendingReason       String
  businessRelevance    Float     // 0-100
  integrationPotential String
  competitorUsage      String[]  // competitors using this
  trendingScore        Float
  detectedAt           DateTime  @default(now())
  teamId               String?
  team                 Team?     @relation(fields: [teamId], references: [id])
  
  @@unique([repository, owner])
  @@index([trendingScore, detectedAt])
  @@map("github_trends")
}

model InnovationBrief {
  id                       String    @id @default(cuid())
  weekEnding               DateTime
  executiveSummary         String
  keyFindings              Json      // {technologyTrends, competitorMoves, researchBreakthroughs, marketOpportunities}
  strategicRecommendations Json      // Array of StrategicRecommendation
  threatAssessment         Json      // Array of ThreatAssessment
  innovationOpportunities  Json      // Array of InnovationOpportunity
  implementationRoadmap    Json      // Array of RoadmapItem
  metrics                  Json      // {trendsAnalyzed, competitorsMonitored, papersReviewed, alertsGenerated, averageRelevanceScore}
  confidence               Float     // AI confidence in recommendations
  nextActions              Json      // Array of ActionItem
  isArchived               Boolean   @default(false)
  feedback                 String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  teamId                   String?
  team                     Team?     @relation(fields: [teamId], references: [id])
  
  @@index([weekEnding, teamId])
  @@index([createdAt])
  @@map("innovation_briefs")
}

model InnovationAlert {
  id            String    @id @default(cuid())
  type          String    // critical_innovation, competitive_threat, technology_breakthrough, market_opportunity
  title         String
  description   String
  severity      String    // low, medium, high, critical
  data          Json      // Raw data related to the alert
  requiresAction Boolean  @default(false)
  isRead        Boolean   @default(false)
  readAt        DateTime?
  actionTaken   String?
  actionDate    DateTime?
  teamId        String?
  team          Team?     @relation(fields: [teamId], references: [id])
  createdAt     DateTime  @default(now())
  
  @@index([isRead, severity])
  @@index([teamId, createdAt])
  @@map("innovation_alerts")
}

model MonitoringSource {
  id           String    @id @default(cuid())
  type         String    // news, github, conference, competitor, research
  name         String
  url          String
  frequency    String    // realtime, hourly, daily, weekly
  lastChecked  DateTime?
  nextCheck    DateTime?
  isActive     Boolean   @default(true)
  configuration Json     // Source-specific configuration
  teamId       String?
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([type, isActive])
  @@index([nextCheck])
  @@map("monitoring_sources")
}
