// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("USER")
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  tasks         Task[]
  files         File[]
  analytics     Analytics[]
  notifications Notification[]
  preferences   UserPreferences?
  activityLogs  ActivityLog[]
  auditLogs     AuditLog[]
  exports       DataExport[]
  teams         TeamMember[]
  teamInvitations TeamInvitation[] @relation("Accepter")
  sentInvitations TeamInvitation[] @relation("Inviter")
  apiKeys       ApiKey[]
  projectMembers ProjectMember[]
  
  // GMB Integration
  gmbAccountId  String?
  gmbLocationId String?
  gmbAccountName String?
  gmbLocationName String?
  
  // Enhanced Website Analyzer
  websiteAnalyses WebsiteAnalysis[]
  
  // Enterprise Integration
  active         Boolean   @default(true)
  lastLoginAt    DateTime?
  scimExternalId String?
  deletedAt      DateTime?
  tenantId       String?
  assignedTasks  Task[]    @relation("TaskAssignee")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     Content[]
  tasks       Task[]
  files       File[]
  analytics   Analytics[]
  notifications Notification[]
  activityLogs  ActivityLog[]
  members     ProjectMember[]
  teamId      String?
  team        Team?     @relation(fields: [teamId], references: [id])
}

model Content {
  id          String   @id @default(cuid())
  title       String
  body        String
  type        String
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("TODO")
  priority    String    @default("MEDIUM")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  notifications Notification[]
  activityLogs  ActivityLog[]
  
  // GitHub Integration
  githubIssueNumber Int?
  assignedToId      String?
  assignedTo        User?    @relation("TaskAssignee", fields: [assignedToId], references: [id])
}

model File {
  id          String    @id @default(cuid())
  name        String
  type        String
  size        Int
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  notifications Notification[]
  activityLogs  ActivityLog[]
}

model Analytics {
  id          String    @id @default(cuid())
  type        String
  action      String
  metadata    String?   // JSON string instead of Json type
  createdAt   DateTime  @default(now())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
}

model SystemMetrics {
  id          String    @id @default(cuid())
  type        String
  value       Float
  timestamp   DateTime  @default(now())
  metadata    String?   // JSON string instead of Json type
}

model Notification {
  id          String    @id @default(cuid())
  type        String
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  taskId      String?
  task        Task?     @relation(fields: [taskId], references: [id])
  fileId      String?
  file        File?     @relation(fields: [fileId], references: [id])
}

model UserPreferences {
  id                String    @id @default(cuid())
  theme             String    @default("light")
  language          String    @default("en")
  emailNotifications Boolean  @default(true)
  pushNotifications Boolean  @default(true)
  timezone          String    @default("UTC")
  dateFormat        String    @default("MM/DD/YYYY")
  timeFormat        String    @default("12h")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id          String    @id @default(cuid())
  action      String
  details     String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  taskId      String?
  task        Task?     @relation(fields: [taskId], references: [id])
  fileId      String?
  file        File?     @relation(fields: [fileId], references: [id])
}

model AuditLog {
  id          String    @id @default(cuid())
  action      String
  entityType  String
  entityId    String?
  oldValue    String?
  newValue    String?
  metadata    String?   // JSON string instead of Json type
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
}

model DataExport {
  id          String    @id @default(cuid())
  type        String
  format      String
  status      String
  url         String?
  error       String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  metadata    String?   // JSON string instead of Json type
}

model ProjectMember {
  id          String    @id @default(cuid())
  role        String    @default("VIEWER")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Team {
  id          String    @id @default(cuid())
  name        String
  description String?
  tenantId    String?
  
  // Stripe subscription fields
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionStatus   String?
  subscriptionPlan     String?   @default("freemium")
  subscriptionStartDate DateTime?
  subscriptionEndDate  DateTime?
  scheduledCancellationDate DateTime?
  cancellationReason   String?
  lastPaymentFailure   DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     TeamMember[]
  projects    Project[]
  invitations TeamInvitation[]
  analytics   TeamAnalytics?
  billing     TeamBilling?
  settings    TeamSettings?
  integrations TeamIntegration[]
  
  // New relations for subscription features
  websiteScans         WebsiteScan[]
  competitiveReports   CompetitiveReport[]
}

model TeamMember {
  id          String    @id @default(cuid())
  role        String    @default("VIEWER")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model TeamInvitation {
  id          String    @id @default(cuid())
  email       String
  role        String    @default("VIEWER")
  status      String    @default("pending")
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  invitedBy   String
  inviter     User      @relation("Inviter", fields: [invitedBy], references: [id])
  acceptedBy  String?
  accepter    User?     @relation("Accepter", fields: [acceptedBy], references: [id])
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  scopes      String
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model TeamAnalytics {
  id            String   @id @default(cuid())
  teamId        String   @unique
  totalRequests Int      @default(0)
  totalTokens   Int      @default(0)
  growthRate    Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  team          Team      @relation(fields: [teamId], references: [id])
  usageStats    UsageStats[]
}

model UsageStats {
  id            String   @id @default(cuid())
  teamAnalyticsId String
  date          DateTime
  requests      Int
  tokens        Int
  createdAt     DateTime @default(now())
  teamAnalytics TeamAnalytics @relation(fields: [teamAnalyticsId], references: [id])
  @@unique([teamAnalyticsId, date])
}

model TeamBilling {
  id            String   @id @default(cuid())
  teamId        String   @unique
  plan          String
  status        String
  nextBillingDate DateTime
  amount        Float
  currency      String
  autoRenew     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  team          Team      @relation(fields: [teamId], references: [id])
  paymentMethod PaymentMethod?
  paymentHistory PaymentHistory[]
}

model PaymentMethod {
  id            String   @id @default(cuid())
  teamBillingId String   @unique
  type          String
  last4         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamBilling   TeamBilling @relation(fields: [teamBillingId], references: [id])
}

model PaymentHistory {
  id            String   @id @default(cuid())
  teamBillingId String
  date          DateTime
  amount        Float
  status        String
  createdAt     DateTime @default(now())
  teamBilling   TeamBilling @relation(fields: [teamBillingId], references: [id])
}

model TeamSettings {
  id            String   @id @default(cuid())
  teamId        String   @unique
  timezone      String   @default("UTC")
  language      String   @default("en")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  team          Team      @relation(fields: [teamId], references: [id])
  notifications Notifications?
  integrations  Integrations?
}

model Notifications {
  id            String   @id @default(cuid())
  teamSettingsId String   @unique
  email         Boolean  @default(true)
  slack         Boolean  @default(false)
  discord       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamSettings  TeamSettings @relation(fields: [teamSettingsId], references: [id])
}

model Integrations {
  id            String   @id @default(cuid())
  teamSettingsId String   @unique
  slack         Boolean  @default(false)
  discord       Boolean  @default(false)
  github        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamSettings  TeamSettings @relation(fields: [teamSettingsId], references: [id])
}

model TeamIntegration {
  id          String    @id @default(cuid())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  type        String
  config      String
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Subscription Usage Tracking Models
model WebsiteScan {
  id          String    @id @default(cuid())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  url         String
  status      String    @default("pending")
  healthScore String?   // JSON string instead of Json type
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([teamId, createdAt])
}

model CompetitiveReport {
  id          String    @id @default(cuid())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  targetDomain String
  competitors  String?   // JSON string instead of Json type
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([teamId, createdAt])
}

// Enhanced Website Analyzer - Week 2 Feature
model WebsiteAnalysis {
  id                    String    @id @default(cuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id])
  url                   String
  analysisId            String    @unique
  overallScore          Int
  contentQualityScore   Int?
  seoScore              Int?
  uxScore               Int?
  performanceScore      Int?
  accessibilityScore    Int?
  recommendationCount   Int       @default(0)
  issueCount           String?
  analysisData         String    // JSON string instead of Json type
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@index([userId, url, createdAt])
  @@index([overallScore])
  @@index([analysisId])
}
