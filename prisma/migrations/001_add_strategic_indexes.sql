-- Migration: Add Strategic Database Indexes for Enterprise Performance
-- Generated by DatabaseOptimizationAgent
-- Date: 2025-06-24
-- WARNING: Run during maintenance window for production deployment

BEGIN;

-- ==================== CRITICAL PERFORMANCE INDEXES ====================

-- User email index for authentication lookup (Priority 1)
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_user_email" ON "User" USING btree ("email");

-- Project userId foreign key index for project queries (Priority 2)
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_project_userid" ON "Project" USING btree ("userId");

-- TeamMember composite index for team membership lookups (Priority 3)
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_teammember_teamid_userid" ON "TeamMember" ("teamId", "userId");

-- ActivityLog user activity timeline index (Priority 4)
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_activitylog_userid_createdat" ON "ActivityLog" ("userId", "createdAt");

-- Analytics type and date index for aggregation queries (Priority 5)
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_analytics_type_createdat" ON "Analytics" ("type", "createdAt");

-- Notification unread lookup index (Priority 6)
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_notification_userid_read" ON "Notification" ("userId", "read");

-- Session token index for authentication (Priority 7)
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_session_sessiontoken" ON "Session" USING btree ("sessionToken");

-- AuditLog entity lookup index (Priority 8)
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_auditlog_entitytype_entityid" ON "AuditLog" ("entityType", "entityId");

-- ==================== SECONDARY PERFORMANCE INDEXES ====================

-- Project team relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_project_teamid" ON "Project" USING btree ("teamId");

-- Task project relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_task_projectid" ON "Task" USING btree ("projectId");

-- Task user assignment index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_task_userid" ON "Task" USING btree ("userId");

-- Task status and priority index for filtering
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_task_status_priority" ON "Task" ("status", "priority");

-- Content project relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_content_projectid" ON "Content" USING btree ("projectId");

-- File project relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_file_projectid" ON "File" USING btree ("projectId");

-- File user ownership index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_file_userid" ON "File" USING btree ("userId");

-- ==================== TEAM & COLLABORATION INDEXES ====================

-- TeamInvitation email lookup index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_teaminvitation_email" ON "TeamInvitation" USING btree ("email");

-- TeamInvitation token lookup index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_teaminvitation_token" ON "TeamInvitation" USING btree ("token");

-- ApiKey user relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_apikey_userid" ON "ApiKey" USING btree ("userId");

-- ApiKey key lookup index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_apikey_key" ON "ApiKey" USING btree ("key");

-- ==================== ANALYTICS & MONITORING INDEXES ====================

-- SystemMetrics type and timestamp index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_systemmetrics_type_timestamp" ON "SystemMetrics" ("type", "timestamp");

-- TeamAnalytics team relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_teamanalytics_teamid" ON "TeamAnalytics" USING btree ("teamId");

-- UsageStats team analytics and date index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_usagestats_teamanalyticsid_date" ON "UsageStats" ("teamAnalyticsId", "date");

-- ==================== ENTERPRISE FEATURES INDEXES ====================

-- Mission client relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_mission_clientid" ON "Mission" USING btree ("clientId");

-- Mission status and priority index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_mission_status_priority" ON "Mission" ("status", "priority");

-- MissionTask mission relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_missiontask_missionid" ON "MissionTask" USING btree ("missionId");

-- ApprovalRequest mission relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_approvalrequest_missionid" ON "ApprovalRequest" USING btree ("missionId");

-- ApprovalRequest client and status index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_approvalrequest_clientid_status" ON "ApprovalRequest" ("clientId", "status");

-- ==================== CRM & COMMUNICATIONS INDEXES ====================

-- CrmContact email lookup index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_crmcontact_email" ON "CrmContact" USING btree ("email");

-- CrmContact type and status index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_crmcontact_type_status" ON "CrmContact" ("type", "status");

-- CrmInteraction contact relationship index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_crminteraction_contactid" ON "CrmInteraction" USING btree ("contactId");

-- EmailCampaign status index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_emailcampaign_status" ON "EmailCampaign" USING btree ("status");

-- ==================== SEARCH & SEO INDEXES ====================

-- BacklinkOpportunity client and status index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_backlinkopp_clientid_status" ON "BacklinkOpportunity" ("clientId", "status");

-- OutreachCampaign client and status index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_outreachcampaign_clientid_status" ON "OutreachCampaign" ("clientId", "status");

-- AcquiredBacklink client and verification index
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_acquiredbacklink_clientid_verified" ON "AcquiredBacklink" ("clientId", "isVerified");

-- ==================== PARTIAL INDEXES FOR OPTIMIZATION ====================

-- Partial index for unread notifications only
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_notification_userid_unread" ON "Notification" ("userId") WHERE "read" = false;

-- Partial index for active sessions only
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_session_userid_active" ON "Session" ("userId") WHERE "expires" > NOW();

-- Partial index for pending approval requests only
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_approvalrequest_clientid_pending" ON "ApprovalRequest" ("clientId") WHERE "status" = 'PENDING';

-- Partial index for active team invitations only
CREATE INDEX CONCURRENTLY IF NOT EXISTS "idx_teaminvitation_email_pending" ON "TeamInvitation" ("email") WHERE "status" = 'pending';

-- ==================== ANALYZE TABLES FOR QUERY PLANNER ====================

ANALYZE "User";
ANALYZE "Project";
ANALYZE "Team";
ANALYZE "TeamMember";
ANALYZE "ActivityLog";
ANALYZE "Analytics";
ANALYZE "Notification";
ANALYZE "Session";
ANALYZE "AuditLog";
ANALYZE "Task";
ANALYZE "Content";
ANALYZE "File";
ANALYZE "TeamInvitation";
ANALYZE "ApiKey";
ANALYZE "SystemMetrics";
ANALYZE "Mission";
ANALYZE "MissionTask";
ANALYZE "ApprovalRequest";
ANALYZE "CrmContact";
ANALYZE "CrmInteraction";
ANALYZE "EmailCampaign";
ANALYZE "BacklinkOpportunity";
ANALYZE "OutreachCampaign";
ANALYZE "AcquiredBacklink";

-- ==================== PERFORMANCE VALIDATION ====================

-- Create performance monitoring view
CREATE OR REPLACE VIEW "database_performance_metrics" AS
SELECT 
    schemaname,
    tablename,
    attname as column_name,
    n_distinct,
    correlation,
    most_common_vals,
    most_common_freqs
FROM pg_stats 
WHERE schemaname = 'public'
ORDER BY tablename, attname;

-- Create index usage monitoring view
CREATE OR REPLACE VIEW "index_usage_stats" AS
SELECT 
    schemaname,
    tablename,
    indexname,
    idx_tup_read,
    idx_tup_fetch,
    idx_scan
FROM pg_stat_user_indexes
ORDER BY idx_scan DESC;

COMMIT;

-- ==================== POST-MIGRATION VERIFICATION ====================

-- Verify all indexes were created successfully
DO $$
DECLARE
    expected_indexes text[] := ARRAY[
        'idx_user_email',
        'idx_project_userid', 
        'idx_teammember_teamid_userid',
        'idx_activitylog_userid_createdat',
        'idx_analytics_type_createdat',
        'idx_notification_userid_read',
        'idx_session_sessiontoken',
        'idx_auditlog_entitytype_entityid'
    ];
    idx text;
    index_exists boolean;
BEGIN
    FOREACH idx IN ARRAY expected_indexes
    LOOP
        SELECT EXISTS (
            SELECT 1 FROM pg_indexes 
            WHERE indexname = idx
        ) INTO index_exists;
        
        IF NOT index_exists THEN
            RAISE WARNING 'Index % was not created successfully', idx;
        ELSE
            RAISE NOTICE 'Index % created successfully', idx;
        END IF;
    END LOOP;
END $$;

-- ==================== ROLLBACK SCRIPT (IF NEEDED) ====================
/*
-- Emergency rollback script - uncomment if needed
BEGIN;

DROP INDEX IF EXISTS "idx_user_email";
DROP INDEX IF EXISTS "idx_project_userid";
DROP INDEX IF EXISTS "idx_teammember_teamid_userid";
DROP INDEX IF EXISTS "idx_activitylog_userid_createdat";
DROP INDEX IF EXISTS "idx_analytics_type_createdat";
DROP INDEX IF EXISTS "idx_notification_userid_read";
DROP INDEX IF EXISTS "idx_session_sessiontoken";
DROP INDEX IF EXISTS "idx_auditlog_entitytype_entityid";
DROP INDEX IF EXISTS "idx_project_teamid";
DROP INDEX IF EXISTS "idx_task_projectid";
DROP INDEX IF EXISTS "idx_task_userid";
DROP INDEX IF EXISTS "idx_task_status_priority";
DROP INDEX IF EXISTS "idx_content_projectid";
DROP INDEX IF EXISTS "idx_file_projectid";
DROP INDEX IF EXISTS "idx_file_userid";
DROP INDEX IF EXISTS "idx_teaminvitation_email";
DROP INDEX IF EXISTS "idx_teaminvitation_token";
DROP INDEX IF EXISTS "idx_apikey_userid";
DROP INDEX IF EXISTS "idx_apikey_key";
DROP INDEX IF EXISTS "idx_systemmetrics_type_timestamp";
DROP INDEX IF EXISTS "idx_teamanalytics_teamid";
DROP INDEX IF EXISTS "idx_usagestats_teamanalyticsid_date";
DROP INDEX IF EXISTS "idx_mission_clientid";
DROP INDEX IF EXISTS "idx_mission_status_priority";
DROP INDEX IF EXISTS "idx_missiontask_missionid";
DROP INDEX IF EXISTS "idx_approvalrequest_missionid";
DROP INDEX IF EXISTS "idx_approvalrequest_clientid_status";
DROP INDEX IF EXISTS "idx_crmcontact_email";
DROP INDEX IF EXISTS "idx_crmcontact_type_status";
DROP INDEX IF EXISTS "idx_crminteraction_contactid";
DROP INDEX IF EXISTS "idx_emailcampaign_status";
DROP INDEX IF EXISTS "idx_backlinkopp_clientid_status";
DROP INDEX IF EXISTS "idx_outreachcampaign_clientid_status";
DROP INDEX IF EXISTS "idx_acquiredbacklink_clientid_verified";
DROP INDEX IF EXISTS "idx_notification_userid_unread";
DROP INDEX IF EXISTS "idx_session_userid_active";
DROP INDEX IF EXISTS "idx_approvalrequest_clientid_pending";
DROP INDEX IF EXISTS "idx_teaminvitation_email_pending";

DROP VIEW IF EXISTS "database_performance_metrics";
DROP VIEW IF EXISTS "index_usage_stats";

COMMIT;
*/