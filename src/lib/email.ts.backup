import nodemailer from 'nodemailer';
import handlebars from 'handlebars';
import { readFile } from 'fs/promises';
import path from 'path';

// Email configuration
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: Number(process.env.SMTP_PORT),
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  }
});

// Email templates
type TeamInvitationData = {
  teamName,
  inviterName,
  role,
  acceptUrl,
};

type PasswordResetData = {
  resetUrl,
};

type WelcomeData = {
  name,
  loginUrl,
};

type EmailTemplates = {
  'team-invitation': TeamInvitationData;
  'password-reset': PasswordResetData;
  'welcome': WelcomeData;
};

// Load and compile email template
async function loadTemplate(templateName: keyof EmailTemplates): Promise<handlebars.TemplateDelegate> {
  const templatePath = path.join(process.cwd(), 'templates', 'emails', `${templateName}.hbs`);
  const template = await readFile(templatePath, 'utf-8');
  return handlebars.compile(template);
}

// Send email with template
export async function sendEmail<T extends keyof EmailTemplates>({
  to,
  subject,
  template,
  data
}: {
  to,
  subject,
  template: T,
  data: EmailTemplates[T],
}) {
  try {
    const compiledTemplate = await loadTemplate(template);
    const html = compiledTemplate(data);

    await transporter.sendMail({
      from: process.env.SMTP_FROM,
      to,
      subject,
      html
    });
  } catch (error) {
    console.error('Failed to send email:', error);
    throw error;
  }
}

// Email templates
export const emailTemplates = {
  teamInvitation: {
    subject: 'Team Invitation',
    template: 'team-invitation',
    data: {
      teamName,
      inviterName,
      role,
      acceptUrl,
    }
  },
  passwordReset: {
    subject: 'Password Reset',
    template: 'password-reset',
    data: {
      resetUrl,
    }
  },
  welcome: {
    subject: 'Welcome to Zenith',
    template: 'welcome',
    data: {
      name,
      loginUrl,
    }
  }
}; 