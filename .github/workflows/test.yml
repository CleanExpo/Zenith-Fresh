name: 🧪 Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: zenith_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🏗️ Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/zenith_test

    - name: 🗄️ Setup test database
      run: npx prisma db push --force-reset
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/zenith_test

    - name: 🔍 Run linting
      run: npm run lint

    - name: 🧪 Run unit tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/zenith_test
        REDIS_URL: redis://localhost:6379
        NEXTAUTH_SECRET: test-secret
        JWT_SECRET: test-jwt-secret

    - name: 🏗️ Test build
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/zenith_test
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella