name: 🚀 Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: 🧪 Full Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: zenith_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🏗️ Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/zenith_test

    - name: 🗄️ Setup test database
      run: npx prisma db push --force-reset
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/zenith_test

    - name: 🔍 Security audit
      run: npm audit --audit-level high

    - name: 🧪 Run full test suite
      run: npm test -- --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/zenith_test
        REDIS_URL: redis://localhost:6379

    - name: 🏗️ Production build test
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/zenith_test

    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    - name: 🏥 Post-deployment health check
      run: |
        sleep 60  # Wait for deployment
        curl -f https://zenith.engineer/api/health || exit 1
        curl -f https://zenith.engineer || exit 1

    - name: 📊 Performance audit
      run: |
        npx lighthouse https://zenith.engineer --chrome-flags="--headless" --output=json --output-path=./lighthouse.json
        npx lighthouse https://zenith.engineer/auth/signin --chrome-flags="--headless" --output=json --output-path=./lighthouse-signin.json

    - name: 🔔 Notify on deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 Production deployment successful! https://zenith.engineer'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 🚨 Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Production deployment failed! Check GitHub Actions.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}