name: Intelligent Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  repo-health-check:
    runs-on: ubuntu-latest
    outputs:
      repo-size: ${{ steps.size-check.outputs.size }}
      should-proceed: ${{ steps.size-check.outputs.proceed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check repository size and health
        id: size-check
        run: |
          # Calculate repository size (excluding .git)
          REPO_SIZE=$(du -sb --exclude=.git . | cut -f1)
          REPO_SIZE_MB=$((REPO_SIZE / 1024 / 1024))
          
          echo "Repository size: ${REPO_SIZE_MB}MB"
          echo "size=${REPO_SIZE_MB}" >> $GITHUB_OUTPUT
          
          # Check if size exceeds threshold (500MB)
          if [ $REPO_SIZE_MB -gt 500 ]; then
            echo "‚ùå Repository size (${REPO_SIZE_MB}MB) exceeds 500MB limit"
            echo "proceed=false" >> $GITHUB_OUTPUT
            
            # Identify large files
            echo "üîç Large files found:"
            find . -type f -size +10M ! -path "./.git/*" | head -10
            
            # Clean up node_modules if present
            if [ -d "node_modules" ]; then
              echo "üßπ Removing node_modules to reduce size"
              rm -rf node_modules
              npm ci --production
            fi
            
            # Recalculate size after cleanup
            NEW_SIZE=$(du -sb --exclude=.git . | cut -f1)
            NEW_SIZE_MB=$((NEW_SIZE / 1024 / 1024))
            echo "Size after cleanup: ${NEW_SIZE_MB}MB"
            
            if [ $NEW_SIZE_MB -le 500 ]; then
              echo "‚úÖ Size now acceptable after cleanup"
              echo "proceed=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Size still too large after cleanup"
              exit 1
            fi
          else
            echo "‚úÖ Repository size acceptable"
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

  dependency-optimization:
    runs-on: ubuntu-latest
    needs: repo-health-check
    if: needs.repo-health-check.outputs.should-proceed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install and optimize dependencies
        run: |
          # Install only production dependencies
          npm ci --omit=dev
          
          # Bundle analyzer for size optimization
          npm install --no-save webpack-bundle-analyzer
          
          # Generate bundle analysis
          if [ -f "next.config.js" ]; then
            echo "üìä Analyzing Next.js bundle size..."
            npm run build 2>&1 | grep -E "(First Load JS|Route|Size)"
          fi

      - name: Cache optimized build
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}

  security-scan:
    runs-on: ubuntu-latest
    needs: repo-health-check
    if: needs.repo-health-check.outputs.should-proceed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          
          # Check for sensitive files
          if find . -name "*.env*" -not -path "./.git/*" | grep -q .; then
            echo "‚ö†Ô∏è Environment files found in repository"
            find . -name "*.env*" -not -path "./.git/*"
          fi

  performance-test:
    runs-on: ubuntu-latest
    needs: [repo-health-check, dependency-optimization]
    if: needs.repo-health-check.outputs.should-proceed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm install @playwright/test
          npx playwright install chromium

      - name: Run performance tests
        run: |
          # Create basic performance test
          cat > playwright.config.js << 'EOF'
          module.exports = {
            testDir: './tests',
            timeout: 30000,
            use: {
              headless: true,
              viewport: { width: 1280, height: 720 }
            }
          };
          EOF
          
          mkdir -p tests
          cat > tests/performance.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test('homepage loads within 3 seconds', async ({ page }) => {
            const start = Date.now();
            await page.goto(process.env.STAGING_URL || 'https://zenith-fresh.vercel.app');
            const loadTime = Date.now() - start;
            
            console.log(`Page load time: ${loadTime}ms`);
            expect(loadTime).toBeLessThan(3000);
          });
          EOF
          
          # Run if staging URL is available
          if [ ! -z "$STAGING_URL" ]; then
            npx playwright test
          fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [repo-health-check, dependency-optimization, security-scan]
    if: needs.repo-health-check.outputs.should-proceed == 'true' && github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging..."
          vercel --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID
          
          # Capture staging URL
          STAGING_URL=$(vercel --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID --json | jq -r '.url')
          echo "STAGING_URL=https://$STAGING_URL" >> $GITHUB_ENV
          echo "üìç Staging deployed to: https://$STAGING_URL"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [repo-health-check, dependency-optimization, security-scan, performance-test]
    if: needs.repo-health-check.outputs.should-proceed == 'true' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          vercel --prod --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID
          
          # Capture production URL
          PROD_URL=$(vercel --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID --json | jq -r '.url')
          echo "üåü Production deployed to: https://$PROD_URL"

  post-deploy-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Setup monitoring
        run: |
          echo "üìä Setting up post-deployment monitoring..."
          
          # Basic health check
          if [ ! -z "$STAGING_URL" ]; then
            curl -f $STAGING_URL || echo "‚ö†Ô∏è Staging health check failed"
          fi
          
          # Log deployment metrics
          echo "‚úÖ Deployment completed successfully"
          echo "üìà Repository size: ${{ needs.repo-health-check.outputs.repo-size }}MB"
          echo "üïê Deployment time: $(date)"

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup and optimization
        run: |
          echo "üßπ Running post-deployment cleanup..."
          
          # Clear any temporary files
          rm -rf /tmp/vercel-*
          
          # Log cleanup completion
          echo "‚úÖ Cleanup completed"