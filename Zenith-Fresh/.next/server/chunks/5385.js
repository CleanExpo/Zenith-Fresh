"use strict";exports.id=5385,exports.ids=[5385],exports.modules={18603:(e,t,n)=>{n.d(t,{$u:()=>h,L:()=>d,VZ:()=>p,Xx:()=>c,YM:()=>o,aq:()=>u,hy:()=>y,sb:()=>g,uT:()=>l,yj:()=>m});var i=n(4991),a=n(9133);let r=null;function s(){if(!r){let e=process.env.OPENAI_API_KEY;if(!e)throw Error("OpenAI API key not configured");r=new i.ZP({apiKey:e})}return r}let o=a.z.object({content:a.z.string().min(10).max(5e4),type:a.z.enum(["seo","readability","sentiment","keywords","structure","eeat","geo","localSeo","narrative"]),options:a.z.object({targetAudience:a.z.string().optional(),industry:a.z.string().optional(),language:a.z.string().default("en"),websiteUrl:a.z.string().optional(),competitorUrls:a.z.array(a.z.string()).optional(),businessLocation:a.z.string().optional()}).optional()}),c=a.z.object({type:a.z.enum(["website","blog","landing","ecommerce","portfolio"]),requirements:a.z.object({title:a.z.string().min(1),description:a.z.string().min(10),targetAudience:a.z.string().optional(),tone:a.z.enum(["professional","casual","friendly","authoritative","creative"]).default("professional"),features:a.z.array(a.z.string()).optional(),industry:a.z.string().optional()})}),l=a.z.object({projectId:a.z.string().min(1),action:a.z.enum(["build","deploy","test","analyze","optimize","backup"]),target:a.z.enum(["development","staging","production"]).optional(),options:a.z.object({skipTests:a.z.boolean().optional(),forceDeploy:a.z.boolean().optional(),notifications:a.z.boolean().optional(),rollback:a.z.boolean().optional()}).optional()}),d=a.z.object({name:a.z.string().min(1).max(100),description:a.z.string().min(10).max(500),type:a.z.enum(["website","web-app","mobile-app","api","other"]).default("website"),status:a.z.enum(["DRAFT","ACTIVE","PUBLISHED","ARCHIVED"]).default("DRAFT"),settings:a.z.object({framework:a.z.string().optional(),language:a.z.string().optional(),database:a.z.string().optional(),hosting:a.z.string().optional()}).optional()}),m=d.partial(),u=a.z.object({goals:a.z.array(a.z.string().min(1)).min(1),timeline:a.z.string().min(1),features:a.z.array(a.z.string().min(1)).min(1),technologies:a.z.array(a.z.string()).optional(),budget:a.z.number().positive().optional(),priority:a.z.enum(["low","medium","high"]),notes:a.z.string().optional()}),p=a.z.object({status:a.z.enum(["DRAFT","ACTIVE","PUBLISHED","ARCHIVED"]).optional(),progress:a.z.number().min(0).max(100).optional(),notes:a.z.string().optional(),completedTasks:a.z.array(a.z.string()).optional(),blockers:a.z.array(a.z.string()).optional()}),g=a.z.object({name:a.z.string().min(2).max(50),email:a.z.string().email(),password:a.z.string().min(8).max(100),confirmPassword:a.z.string().min(8).max(100)}).refine(e=>e.password===e.confirmPassword,{message:"Passwords don't match",path:["confirmPassword"]});class y{static async analyzeContent(e){let{content:t,type:n,options:i}=e;try{let e=this.buildAnalysisPrompt(t,n,i),a=s(),r=await a.chat.completions.create({model:"gpt-4",messages:[{role:"system",content:"You are an expert content analyst. Provide detailed, actionable analysis in JSON format."},{role:"user",content:e}],temperature:.3,max_tokens:2e3}),o=r.choices[0]?.message?.content;if(!o)throw Error("No response from AI service");let c=JSON.parse(o);return{type:c.type||`${n.toUpperCase()} Analysis`,score:c.score||75,suggestions:c.suggestions||[],insights:{strengths:c.insights?.strengths||[],improvements:c.insights?.improvements||[],metrics:c.insights?.metrics||{}},processedAt:new Date().toISOString()}}catch(e){return console.error("AI Analysis error:",e),this.getFallbackAnalysis(t,n)}}static buildAnalysisPrompt(e,t,n){let i=`Analyze the following content for ${t} and provide a detailed JSON response with the structure:
{
  "type": "Analysis Type Name",
  "score": 0-100,
  "suggestions": ["actionable suggestion 1", "actionable suggestion 2"],
  "insights": {
    "strengths": ["strength 1", "strength 2"],
    "improvements": ["improvement 1", "improvement 2"],
    "metrics": {"metric1": value, "metric2": value}
  }
}

Content to analyze:
${e}`;switch(t){case"seo":return`${i}

Focus on SEO factors like keyword usage, meta description potential, heading structure, readability for search engines, and content optimization. Include metrics like keyword density, content length, heading count, and readability score.`;case"readability":return`${i}

Focus on readability factors like sentence complexity, vocabulary level, paragraph length, and flow. Include metrics like Flesch-Kincaid grade level, average sentence length, passive voice percentage, and syllables per word.`;case"sentiment":return`${i}

Focus on emotional tone, sentiment polarity, and engagement level. Include metrics like positive/negative percentage, emotional intensity (0-1), confidence score, and tone consistency.`;case"keywords":return`${i}

Focus on keyword extraction, density analysis, and semantic relevance. Include metrics like primary keyword count, secondary keywords, keyword density percentage, and semantic keyword coverage.`;case"structure":return`${i}

Focus on content organization, heading hierarchy, paragraph structure, and logical flow. Include metrics like heading count, paragraph count, average paragraph length, and structure score (0-1).`;default:return i}}static getFallbackAnalysis(e,t){let n=e.split(/\s+/).length,i=e.split(/[.!?]+/).filter(e=>e.trim().length>0).length,a=e.split(/\n\s*\n/).length;return{type:`${t.toUpperCase()} Analysis`,score:Math.floor(20*Math.random())+70,suggestions:["AI service temporarily unavailable - showing basic analysis","Please try again later for detailed AI insights","Consider breaking content into smaller sections","Review content structure and flow"],insights:{strengths:["Content has appropriate length","Basic structure is present"],improvements:["AI analysis unavailable - manual review recommended"],metrics:{wordCount:n,sentenceCount:i,paragraphCount:a,averageWordsPerSentence:Math.round(n/Math.max(i,1))}},processedAt:new Date().toISOString()}}}class h{static async generateStory(e){let{type:t,requirements:n}=e;try{let e=this.buildStoryPrompt(t,n),i=s(),a=await i.chat.completions.create({model:"gpt-4",messages:[{role:"system",content:"You are an expert content creator and copywriter. Generate compelling, well-structured content in JSON format."},{role:"user",content:e}],temperature:.7,max_tokens:3e3}),r=a.choices[0]?.message?.content;if(!r)throw Error("No response from AI service");let o=JSON.parse(r);return{type:t,title:o.title||n.title,content:{sections:o.content?.sections||[],metadata:{description:o.content?.metadata?.description||n.description,keywords:o.content?.metadata?.keywords||[],estimatedReadTime:o.content?.metadata?.estimatedReadTime||5}},seoOptimization:{metaTitle:o.seoOptimization?.metaTitle||n.title,metaDescription:o.seoOptimization?.metaDescription||n.description,focusKeywords:o.seoOptimization?.focusKeywords||[],headingStructure:o.seoOptimization?.headingStructure||[]},createdAt:new Date().toISOString()}}catch(e){return console.error("AI Story Builder error:",e),this.getFallbackStory(t,n)}}static buildStoryPrompt(e,t){return`Create a comprehensive ${e} content structure with the following requirements:

Title: ${t.title}
Description: ${t.description}
Target Audience: ${t.targetAudience||"General audience"}
Tone: ${t.tone}
Industry: ${t.industry||"General"}
Features: ${t.features?.join(", ")||"Standard features"}

Generate a JSON response with this structure:
{
  "title": "Optimized title",
  "content": {
    "sections": [
      {
        "title": "Section Title",
        "content": "Section content...",
        "type": "hero|about|features|testimonials|cta|footer|content"
      }
    ],
    "metadata": {
      "description": "Content description",
      "keywords": ["keyword1", "keyword2"],
      "estimatedReadTime": 5
    }
  },
  "seoOptimization": {
    "metaTitle": "SEO optimized title",
    "metaDescription": "SEO meta description",
    "focusKeywords": ["primary", "secondary"],
    "headingStructure": ["H1", "H2", "H3"]
  }
}

Create compelling, ${t.tone} content that is optimized for ${e} and appeals to ${t.targetAudience||"the target audience"}.`}static getFallbackStory(e,t){return{type:e,title:t.title,content:{sections:[{title:"Welcome",content:`Welcome to ${t.title}. ${t.description}`,type:"hero"},{title:"About",content:"AI service temporarily unavailable. This is a basic content structure that would normally be generated by our AI system.",type:"about"},{title:"Get Started",content:"Please try again later for AI-generated content.",type:"cta"}],metadata:{description:t.description,keywords:["basic","content",e],estimatedReadTime:2}},seoOptimization:{metaTitle:t.title,metaDescription:t.description,focusKeywords:[t.title.toLowerCase()],headingStructure:["H1: Welcome","H2: About","H2: Get Started"]},createdAt:new Date().toISOString()}}}},95456:(e,t,n)=>{n.d(t,{Lz:()=>m,r4:()=>p});var i=n(13539),a=n(53797),r=n(77234),s=n(77210),o=n(42023),c=n.n(o),l=n(75748),d=n(47833);let m={adapter:(0,i.N)(l.db),providers:[(0,a.Z)({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)throw new d._7("Missing credentials");let t=await l.db.user.findUnique({where:{email:e.email},include:{organizations:{include:{organization:!0}}}});if(!t||!t.password||!await c().compare(e.password,t.password))throw new d._7("Invalid credentials");return{id:t.id,email:t.email,name:t.name,avatar:t.avatar,organizations:t.organizations.map(e=>({id:e.organization.id,name:e.organization.name,role:e.role}))}}}),...process.env.GOOGLE_CLIENT_ID&&process.env.GOOGLE_CLIENT_SECRET?[(0,r.Z)({clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET})]:[],...process.env.GITHUB_CLIENT_ID&&process.env.GITHUB_CLIENT_SECRET?[(0,s.Z)({clientId:process.env.GITHUB_CLIENT_ID,clientSecret:process.env.GITHUB_CLIENT_SECRET})]:[]],session:{strategy:"jwt",maxAge:2592e3},pages:{signIn:"/auth/signin",signUp:"/auth/signup",error:"/auth/error"},callbacks:{async jwt({token:e,user:t,account:n}){if(t&&(e.id=t.id,e.organizations=t.organizations||[]),n?.provider&&"credentials"!==n.provider){let t=await l.db.user.findUnique({where:{email:e.email},include:{organizations:{include:{organization:!0}}}});t&&(e.id=t.id,e.organizations=t.organizations.map(e=>({id:e.organization.id,name:e.organization.name,role:e.role})))}return e},session:async({session:e,token:t})=>(t&&e.user&&(e.user.id=t.id,e.user.organizations=t.organizations||[]),e),signIn:async({user:e,account:t,profile:n})=>(t?.provider,!0)},events:{async signIn({user:e,account:t,profile:n,isNewUser:i}){console.log(`User signed in: ${e.email} via ${t?.provider}`)},async signOut({session:e,token:t}){console.log(`User signed out: ${e?.user?.email}`)}},debug:!1};async function u(e){return c().hash(e,12)}async function p(e){let t=await l.db.user.findFirst({where:{OR:[{email:e.email},...e.username?[{username:e.username}]:[]]}});if(t){if(t.email===e.email)throw new d._7("Email already exists");if(t.username===e.username)throw new d._7("Username already exists")}let n=await u(e.password);return l.db.user.create({data:{email:e.email,password:n,name:e.name,username:e.username},select:{id:!0,email:!0,name:!0,username:!0,createdAt:!0}})}},75748:(e,t,n)=>{n.d(t,{db:()=>a});var i=n(53524);let a=globalThis.prisma??new i.PrismaClient({log:["error"]})},47833:(e,t,n)=>{n.d(t,{_7:()=>a,dR:()=>r,zG:()=>s});class i extends Error{constructor(e,t=500,n="INTERNAL_ERROR"){super(e),this.message=e,this.statusCode=t,this.code=n,this.name="AppError"}}class a extends i{constructor(e="Authentication required"){super(e,401,"AUTHENTICATION_ERROR"),this.name="AuthenticationError"}}class r extends i{constructor(e="Resource"){super(`${e} not found`,404,"NOT_FOUND"),this.name="NotFoundError"}}function s(e){return(console.error("API Error:",e),e instanceof i)?{message:e.message,statusCode:e.statusCode,code:e.code}:e instanceof Error?{message:e.message,statusCode:500,code:"INTERNAL_ERROR"}:{message:"An unexpected error occurred",statusCode:500,code:"UNKNOWN_ERROR"}}}};